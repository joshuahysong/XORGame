@model XORGame.Data.DataTransferEntities.BattleData
@{ 
    var selectedCharacter = Model.Characters.Where(c => c.IsSelected).FirstOrDefault();
}

<div class ="row equal">
    <div class="col-md-8">
        <div class="row flex-align-center">
            @for (var i = 5; i < 10; i++)
            {
                if (Model.Characters.Any(c => c.IsEnemy && c.Location == i))
                {
                    <div class="board-space">
                        @Html.Partial("_CharacterCard", Model.Characters.Where(c => c.IsEnemy && c.Location == i).FirstOrDefault())
                    </div>
                }
                else
                {
                    <div class="board-space">
                        &nbsp;
                    </div>
                }
            }
        </div>
        <div class="row flex-align-center">
            @for (var i = 0; i < 5; i++)
            {
                if (Model.Characters.Any(c => c.IsEnemy && c.Location == i))
                {
                    <div class="board-space">
                        @Html.Partial("_CharacterCard", Model.Characters.Where(c => c.IsEnemy && c.Location == i).FirstOrDefault())
                    </div>
                }
                else
                {
                    <div class="board-space">
                        &nbsp;
                    </div>
                }
            }
        </div>
        <div class="row team-separator">
            <div class="col-sm-12">
            </div>
        </div>
        <div class="row flex-align-center">
            @for (var i = 0; i < 5; i++)
            {
                if (Model.Characters.Any(c => !c.IsEnemy && c.Location == i))
                {
                    <div class="board-space">
                        @Html.Partial("_CharacterCard", Model.Characters.Where(c => !c.IsEnemy && c.Location == i).FirstOrDefault())
                    </div>
                }
                else
                {
                    <div class="board-space">
                        &nbsp;
                    </div>
                }
            }
        </div>
        <div class="row flex-align-center">
            @for (var i = 5; i < 10; i++)
            {
                if (Model.Characters.Any(c => !c.IsEnemy && c.Location == i))
                {
                    <div class="board-space">
                        @Html.Partial("_CharacterCard", Model.Characters.Where(c => !c.IsEnemy && c.Location == i).FirstOrDefault())
                    </div>
                }
                else
                {
                    <div class="board-space">
                        &nbsp;
                    </div>
                }
            }
        </div>
    </div>
    <div class="col-md-3">
        <div class="panel panel-default panel-body ability-panel">
            <label>@selectedCharacter.Name</label>
            <hr />
            @foreach (var ability in selectedCharacter.Abilities)
            {
                <div class="row ability-row">
                    <div class="col-md-9 ability-column">
                        <div class="btn-group btn-group-justified btn-ability-group" role="group">
                            @if (ability.IsOnCooldown())
                            {
                                <div class="btn-group btn-ability-cooldown" role="group">
                                    <button class="btn btn-default">@ability.CurrentCooldown</button>
                                </div>
                            }
                            <div class="btn-group btn-ability" role="group" data-abilityid="@ability.ID">
                            @switch (ability.Type)
                            {
                                case "Ranged":
                                    <button class="btn btn-danger" @(ability.IsOnCooldown() ? "disabled=disabled" : string.Empty)><div class="text-left">
                                        <span class="glyphicon glyphicon-screenshot"></span> &nbsp;@ability.Name</div>
                                    </button>
                                    break;
                                case "Melee":
                                    <button class="btn btn-danger" @(ability.IsOnCooldown() ? "disabled='disabled'" : string.Empty)><div class="text-left">                                
                                        <i class="fas fa-hand-rock"></i>&nbsp;@ability.Name</div>
                                    </button>
                                    break;
                                case "Heal":
                                    <button class="btn btn-success" @(ability.IsOnCooldown() ? "disabled='disabled'" : string.Empty)>
                                        <div class="text-left">                                
                                        <i class="fas fa-heart"></i>&nbsp;@ability.Name</div>
                                    </button>
                                    break;
                            }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 ability-column-info">
                        <button class="btn btn-default"><span class="glyphicon glyphicon-info-sign"></span></button>
                    </div>
                </div>
            }
            <hr />
            <div class="row">
                <div class="col-xs-6"><label>HP</label></div>
                <div class="col-xs-6">@selectedCharacter.CurrentHealth / @selectedCharacter.TotalHealth</div>
            </div>
            <div class="row">
                <div class="col-xs-6"><label>Attack</label></div>
                <div class="col-xs-6">@selectedCharacter.Attack</div>
            </div>
            <div class="row">
                <div class="col-xs-6"><label>Defense</label></div>
                <div class="col-xs-6">@selectedCharacter.Defense</div>
            </div>
            <div class="row">
                <div class="col-xs-6"><label>Speed</label></div>
                <div class="col-xs-6">@selectedCharacter.Speed</div>
            </div>
            <hr />
        </div>
    </div>
</div>
